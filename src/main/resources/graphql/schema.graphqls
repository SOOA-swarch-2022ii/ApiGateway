type Date {
    day: String
    month: String
    year: String
}

input UserInput {

    role: String
    name: String
    phone: String
    address: String
    nationality: String
    sex: String
    dateOfBirth: String
    identificationNumber: Int
    email: String
    password: String

}

input AcademicRecordInfoInput {

    student_id: String
    subjects_pending : String
    subjects_record : String
    papa : Float
    papi : Float
    status : Boolean
    faculty: String
    campus: String
    career: String
}

input AcademicRecordInfo {
    id: ID!
    student_id: String
    subjects_pending : String
    subjects_record : String
    papa : Float
    papi : Float
    status : Boolean
    faculty: String
    campus: String
    career: String
}

type User {
    id: ID!
    role: String
    name: String
    phone: String
    address: String
    nationality: String
    sex: String
    dateOfBirth: Date
    identificationNumber: Int
    email: String
}

type Query {
    findAll: [User]
    findOne(id: ID!): User
    findAll: [AcademicRecordInfo]
    findOne(student_id: String): AcademicRecordInfo
}

type Mutation {
    createUser(userInput: UserInput, academicInfoInput: AcademicRecordInfoInput): User
    updateUser(id: ID!, input: UserInput): User
    deleteUser(id: ID!): User
}