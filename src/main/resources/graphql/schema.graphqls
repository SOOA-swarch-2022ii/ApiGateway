type Date {
    day: String
    month: String
    year: String
}

input UserInput {

    role: String
    name: String
    phone: String
    address: String
    nationality: String
    sex: String
    dateOfBirth: String
    identificationNumber: Int
    email: String
    password: String

}

input AcademicInfoInput {
    campus: String,
    faculty: String,
    career: String
}

type User {
    id: ID!
    role: String
    name: String
    phone: String
    address: String
    nationality: String
    sex: String
    dateOfBirth: Date
    identificationNumber: Int
    email: String
}

type Subject{
    id: ID!
	code: String!             
	name: String!       
	vigency: Boolean               
	level: String             
	credits: Int  
    campus: String
	faculty: String
	department: String
	basicAcademicUnit: String
	Academic_level: String
	Content: [String]
}

type Course{
	 id: ID!
	subject: String!
	schedule: [Schedule]
	academic_semester: String
	start_date:     String
	end_date:     String
	group_number:    Int
	places:    Int
	professors:    [String]
	studentsRecord:   [StudentsRecord]
}
type Schedule{
		day: String
		startH: String
		endH: String
		location: String
	}
type StudentsRecord{
        student: String!
		grades: [Float]
}




type Query {
    findAll: [User]
    findOne(id: ID!): User
    findOneByUsername(username: String!): User

    getSubjectById(name: String!): [Subject]
    getSubjectByName(id: ID!): [Subject]
    getSubjectByCode(code: String!): Subject

    getCourseById(subject: String!): [Course]
    getCoursesBySubject(id: ID!): Course
    getCoursesByStudent(student: String!): [Course]
    getCoursesBySubjectSem(student: String!, semester: String!): [Course]
    getCoursesByProfessor(professor: String!): [Course]
}

type Mutation {
    createUser(userInput: UserInput, academicInfoInput: AcademicInfoInput): User
    updateUser(id: ID!, input: UserInput): User
    deleteUser(id: ID!): User
}