type Date {
    day: String
    month: String
    year: String
}

input UserInput {

    role: String
    name: String
    phone: String
    address: String
    nationality: String
    sex: String
    dateOfBirth: String
    identificationNumber: Int
    email: String
    password: String

}

input AcademicRecordInfoInput {
    faculty: String
    campus: String
    career: String
}

type AcademicRecordInfo {
    id: ID!
    student_id: String
    subjects_pending : String
    subjects_record : String
    papa : Float
    papi : Float
    status : Boolean
    faculty: String
    campus: String
    career: String
}

type User {
    id: ID!
    studentId: String
    role: String
    name: String
    phone: String
    address: String
    nationality: String
    sex: String
    dateOfBirth: Date
    identificationNumber: Int
    email: String
}

type Career {
    _id : Int   
    academic_level : String
    name : String
    SNIES_code : Int   
    credits : Int   
    departament : String
    faculty : String
    campus : String
    pensum : [String] 
}

input CareerInput{
    _id : Int   
    academic_level : String
    name : String
    SNIES_code : Int   
    credits : Int   
    departament : String
    faculty : String
    campus : String
    pensum : [String] 
}

type StudentRecord {
    _id : String 
    student : String 
    grades : [Float]
}

type StudentsRecords {
    _id : String
    students_record: [StudentRecord]
}

input RegisterStudentCourse {
    student_id: String
    course_id: String
}

type Schedule{
    day: String
    start_h: String
    end_h: String
    location: String
}

type StudentRecordRegisterSubject{
    student: String
    grades: [Float]
}

type Course {
    _id: String   
    subject: String
    academic_semester: String
    schedule: [Schedule] 
    start_date: String   
    end_date: String
    places: Int
    group_number:Int
    professors: [String]
    students_record: [StudentRecordRegisterSubject]
}

type Query {
    findAll: [User]
    findOne(id: ID!): User
    getCareers: [Career]
    getCareer(_id : Int): Career
    getGrade(id: String): StudentsRecords
    getGradeCourse(subject: String, group: Int): StudentsRecords
    getGrades: [StudentsRecords]
    findAllAcademicRecords: [AcademicRecordInfo]
    findAcademicRecord(student_id: String): AcademicRecordInfo

    findOneCourse(course_id: String): Course
    findCoursesByStudent(student_id: String): [Course]
}


type Mutation {
    createUser(userInput: UserInput, academicRecordInfoInput: AcademicRecordInfoInput): User
    updateUser(id: ID!, input: UserInput): User
    deleteUser(id: ID!): User

    createCareer(input: CareerInput): Career
    updateDeleteCareer(_id : Int, subject: String): Career
    updateAddCareer(_id : Int, subject: String): Career
    deleteCareer(_id: Int): Career
    updateGradeId(id: String, student: String, grade: Float): StudentRecord
    updateGradeCourse(subject: String, group: Int, student: String, grade: Float): StudentRecord
    deleteGradeId(id:String, student: String, grade: Float): StudentRecord
    deleteGradeCourse(subject: String, group: Int, student: String, grade: Float): StudentRecord

    updateAcademicRecord(studentId: String): AcademicRecordInfo
    deleteAcademicRecord(studentId: String): AcademicRecordInfo

    registerStudentCourse(registerStudentCourse: RegisterStudentCourse): Course
    unregisterStudentCourse(student_id: String, course_id: String): Course
}